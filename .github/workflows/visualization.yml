name: Visualize Pipeline

# This workflow generates visual outputs for every PR to help review augmentation changes
on:
  pull_request:
    branches: [master, main, develop]
  pull_request_target:
    branches: [master, main, develop]
  push:
    branches: [master, main]

permissions:
  contents: read
  pull-requests: write

jobs:
  visualize-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv and maturin
        run: |
          pip install uv maturin

      - name: Create virtual environment and install dependencies
        run: |
          uv sync

      - name: Build Rust extension with Maturin
        run: |
          source .venv/bin/activate
          maturin develop

      - name: Install additional dependencies
        run: |
          source .venv/bin/activate
          pip install opencv-python-headless

      - name: Generate pipeline visualizations
        run: |
          source .venv/bin/activate
          python examples/visualize_pipeline.py \
            --output-dir examples/visual_outputs/pipeline_stages \
            --class-counts person:2,car:1 \
            --image-width 512 \
            --image-height 512

      - name: Upload visualization outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-visualizations
          path: examples/visual_outputs/pipeline_stages/
          retention-days: 30

      - name: Generate visualization report
        if: always()
        run: |
          echo "## Pipeline Visualization Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Visualization pipeline executed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Visualizations" >> $GITHUB_STEP_SUMMARY
          if [ -d "examples/visual_outputs/pipeline_stages" ]; then
            count=$(ls -1 examples/visual_outputs/pipeline_stages/*.jpg 2>/dev/null | wc -l)
            echo "- Generated $count visualization images" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Files:**" >> $GITHUB_STEP_SUMMARY
            ls -1 examples/visual_outputs/pipeline_stages/*.jpg 2>/dev/null | while read f; do
              echo "- $(basename $f)" >> $GITHUB_STEP_SUMMARY
            done
          fi

      - name: Create PR comment with visualization summary
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const visualDir = 'examples/visual_outputs/pipeline_stages';
            let fileCount = 0;
            let fileList = '';

            if (fs.existsSync(visualDir)) {
              const files = fs.readdirSync(visualDir).filter(f => f.endsWith('.jpg')).slice(0, 5);
              fileCount = files.length;
              if (files.length > 0) {
                fileList = '**Generated Files:**\n' + files.map(f => `- ${f}`).join('\n');
              }
            }

            let comment = '## ðŸ“Š Copy-Paste Augmentation Pipeline Visualization\n\n';
            comment += 'âœ… Visual outputs generated from this PR:\n\n';
            comment += `- **Visualizations Generated:** ${fileCount} images\n`;
            comment += '- **Status:** Pipeline execution successful\n';
            comment += '- **Artifacts:** Available in GitHub Actions artifacts\n\n';
            if (fileList) {
              comment += fileList;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })
