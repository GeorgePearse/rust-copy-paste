name: Visualize Pipeline

# This workflow generates visual outputs for every PR to help review augmentation changes
on:
  pull_request:
    branches: [master, main, develop]
  pull_request_target:
    branches: [master, main, develop]
  push:
    branches: [master, main]

permissions:
  contents: read
  pull-requests: write

jobs:
  visualize-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv and maturin
        run: |
          pip install uv maturin

      - name: Create virtual environment and install dependencies
        run: |
          uv sync

      - name: Build Rust extension with Maturin
        run: |
          source .venv/bin/activate
          maturin develop

      - name: Install additional dependencies
        run: |
          source .venv/bin/activate
          pip install opencv-python-headless

      - name: Generate pipeline visualizations
        run: |
          source .venv/bin/activate
          python examples/visualize_pipeline.py \
            --output-dir examples/visual_outputs/pipeline_stages \
            --class-counts person:2,car:1 \
            --image-width 512 \
            --image-height 512

      - name: Upload visualization outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-visualizations
          path: examples/visual_outputs/pipeline_stages/
          retention-days: 30

      - name: Generate visualization report
        if: always()
        run: |
          echo "## Pipeline Visualization Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Visualization pipeline executed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Visualizations" >> $GITHUB_STEP_SUMMARY
          if [ -d "examples/visual_outputs/pipeline_stages" ]; then
            count=$(ls -1 examples/visual_outputs/pipeline_stages/*.jpg 2>/dev/null | wc -l)
            echo "- Generated $count visualization images" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Files:**" >> $GITHUB_STEP_SUMMARY
            ls -1 examples/visual_outputs/pipeline_stages/*.jpg 2>/dev/null | while read f; do
              echo "- $(basename $f)" >> $GITHUB_STEP_SUMMARY
            done
          fi

      - name: Create PR comment with embedded visualization images
        if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && always()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const visualDir = 'examples/visual_outputs/pipeline_stages';
            let comment = '## 📊 Copy-Paste Augmentation Pipeline Visualization\n\n';
            comment += '✅ Visual outputs generated from this PR\n\n';

            if (fs.existsSync(visualDir)) {
              const allFiles = fs.readdirSync(visualDir).filter(f => f.endsWith('.jpg')).sort();
              const imagesToShow = [
                'input_with_bboxes.jpg',
                'augmented_with_bboxes.jpg',
                'comparison.jpg'
              ].filter(name => allFiles.some(f => f.includes(name))).slice(0, 3);

              if (imagesToShow.length > 0) {
                comment += '### Input and Output Comparison\n\n';

                for (const filename of imagesToShow) {
                  const matchedFile = allFiles.find(f => f.includes(filename.replace('.jpg', '')));
                  if (matchedFile) {
                    const filePath = path.join(visualDir, matchedFile);
                    try {
                      const imageData = fs.readFileSync(filePath, 'base64');
                      const alt = matchedFile.replace(/_/g, ' ').replace('.jpg', '');
                      comment += `**${alt}**\n\n`;
                      comment += `![${alt}](data:image/jpeg;base64,${imageData})\n\n`;
                    } catch (e) {
                      console.log(`Could not read ${filePath}: ${e.message}`);
                    }
                  }
                }
              }

              comment += '### Generated Files\n\n';
              const fileList = allFiles.slice(0, 5).map(f => `- ${f}`).join('\n');
              comment += fileList + '\n\n';
            } else {
              comment += '⚠️ No visualization outputs were generated.\n\n';
            }

            comment += '**Status:** Pipeline execution successful\n';
            comment += '**Artifacts:** Available in GitHub Actions (retained for 30 days)\n';

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log(`Failed to create comment: ${error.message}`);
              console.log('Comment body length:', comment.length);
              // Try without images if base64 encoding fails
              if (comment.length > 65536) {
                console.log('Comment too large, creating summary-only comment');
                const summaryComment = '## 📊 Copy-Paste Augmentation Pipeline Visualization\n\n✅ Visual outputs generated! See artifacts for images.';
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summaryComment
                });
              }
            }
